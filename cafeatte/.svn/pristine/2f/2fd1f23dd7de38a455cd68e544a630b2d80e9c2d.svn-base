package com.cafeatte.member.dao;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.cafeatte.member.dto.MemberDTO;
import com.cafeatte.util.db.DBUtil;

public class MemberDAO {

	public Integer join(MemberDTO dto) throws Exception{
		Connection con = DBUtil.getConnection();
		
		String sql = " INSERT INTO member(id, pw, addr, tel, email, question, answer, photo, nickname) " + 
				" VALUES (?, ? , ?, ?, ?, ?, ?, ?, ?) ";
	
		PreparedStatement pstmt = con.prepareStatement(sql);
		pstmt.setString(1, dto.getId());
		pstmt.setString(2, dto.getPw());
		pstmt.setString(3, dto.getAddr());
		pstmt.setString(4, dto.getTel());
		pstmt.setString(5, dto.getEmail());
		pstmt.setString(6, dto.getQuestion());
		pstmt.setString(7, dto.getAnswer());
		pstmt.setString(8, dto.getPhoto());
		pstmt.setString(9, dto.getNickName());
		
		int result = pstmt.executeUpdate();
		if (result > 0) {
			System.out.println("회원 등록에 성공했습니다.");

		}
		DBUtil.close(con, pstmt);

		return result;
		
		
	}
	
	public MemberDTO login(MemberDTO dto) throws Exception {
		System.out.println("MemberDAO.login()");
		
		String sql = "";
		
		MemberDTO outDTO = new MemberDTO();
		
		Connection con = DBUtil.getConnection();
		
		sql = " SELECT m.id, m.nickName, m.grade, g.gradeName, m.state, s.stateName FROM member m, grade g, state s "
				+ " WHERE (m.id = ? and m.pw = ?) and (m.grade = g.grade) and (m.state = s.state ) ";
		
		PreparedStatement pstmt = con.prepareStatement(sql);
		
		pstmt.setString(1, dto.getId());
		pstmt.setString(2, dto.getPw());
		
		ResultSet rs = pstmt.executeQuery();
		
		if(rs!=null) {
			outDTO.setId(rs.getString("id"));
			outDTO.setNickName(rs.getString("nickName"));
			outDTO.setGrade(rs.getInt("grade"));
			outDTO.setId(rs.getString("id"));
			outDTO.setId(rs.getString("id"));
		}
		DBUtil.close(con, pstmt, rs);
		return outDTO;
	}
	
	public void  withdrawal(String id) throws Exception {

		System.out.println("MemberDAO.withdrawal().id:" + id);

		Connection con = DBUtil.getConnection();

		String sql = " delete from member where id = ? ";
		System.out.println("MemberDAO.delete().sql:" + sql);

		PreparedStatement pstmt = con.prepareStatement(sql);
		pstmt.setString(1, id);

		int result = pstmt.executeUpdate();

		if (result > 0)
			System.out.println("삭제 성공");
		else
			System.out.println("삭제가 되지 않았습니다. -id를 확인하세요.");

		DBUtil.close(con, pstmt);

	} // end of withdrawal
	
	public void update(MemberDTO dto) throws Exception {
		// 회원 정보 수정
		System.out.println("MemberDAO.update().dto:" + dto);

		Connection con = DBUtil.getConnection();

		String sql = " UPDATE member SET nickName = ?, addr = ?, tel = ?, email = ?, photo = ? WHERE id = ? ";
		System.out.println("MemberDAO.update().sql:" + sql);

		PreparedStatement pstmt = con.prepareStatement(sql);
		pstmt.setString(1, dto.getNickName());
		pstmt.setString(2, dto.getAddr());
		pstmt.setString(3, dto.getTel());
		pstmt.setString(4, dto.getEmail());
		pstmt.setString(5, dto.getPhoto());
		pstmt.setString(6, dto.getId());

		int result = pstmt.executeUpdate();

		if (result > 0)
			System.out.println("수정 성공");
		else
			System.out.println("수정이 되지 않았습니다. -id를 확인하세요.");

		DBUtil.close(con, pstmt);

	} // end of update
	
	public List<MemberDTO> list() throws Exception {

		System.out.println("MemberDAO.list()");

		List<MemberDTO> list = null;

		Connection con = DBUtil.getConnection();

		String sql = " SELECT m.id, m.nickName, m.addr, m.email, m.photo, g.gradeName, s.stateName FROM member m, grade g, state s "
		+ " WHERE (m.grade = g.grade) and (m.state = s.state ) ";

		System.out.println("MemberDTO.list().sql:" + sql);

		PreparedStatement pstmt = con.prepareStatement(sql);
		ResultSet rs = pstmt.executeQuery();

		if (rs != null) {
			while (rs.next()) {
				if (list == null)
					list = new ArrayList<MemberDTO>();

				MemberDTO dto = new MemberDTO();

				dto.setId(rs.getString("id"));
				dto.setNickName(rs.getString("nickName"));
				dto.setAddr(rs.getString("addr"));
				dto.setEmail(rs.getString("email"));
				dto.setPhoto(rs.getString("photo"));
				list.add(dto);

			}
		}
		DBUtil.close(con, pstmt, rs);
		System.out.println("MemberDAO.list().list:" + list);
		return list;

	} // end of list
	
}
